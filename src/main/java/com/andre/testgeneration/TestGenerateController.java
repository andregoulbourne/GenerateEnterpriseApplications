package com.andre.testgeneration;
import static com.andre.util.Util.util;


public class TestGenerateController {
	private String className;
	
	public String getClassName() {
		return className;
	}


	public void setClassName(String className) {
		this.className = util.firstLetterToCapital(className);
	}


	public TestGenerateController(String className) {
		super();
		this.className = util.firstLetterToCapital(className);
	}


	public String generateControllerTest() {
		return  "package com.registerandlogin.test.controller;\r\n"
				+ "\r\n"
				+ "import static org.hamcrest.CoreMatchers.is;\r\n"
				+ "import static org.mockito.BDDMockito.given;\r\n"
				+ "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\r\n"
				+ "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\n"
				+ "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\r\n"
				+ "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\r\n"
				+ "import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\r\n"
				+ "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\r\n"
				+ "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n"
				+ "\r\n"
				+ "import java.util.Arrays;\r\n"
				+ "import java.util.List;\r\n"
				+ "import java.util.Optional;\r\n"
				+ "\r\n"
				+ "import org.junit.jupiter.api.BeforeEach;\r\n"
				+ "import org.junit.jupiter.api.Test;\r\n"
				+ "import org.junit.jupiter.api.extension.ExtendWith;\r\n"
				+ "import org.springframework.beans.factory.annotation.Autowired;\r\n"
				+ "import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\r\n"
				+ "import org.springframework.boot.test.mock.mockito.MockBean;\r\n"
				+ "import org.springframework.http.MediaType;\r\n"
				+ "import org.springframework.test.context.junit.jupiter.SpringExtension;\r\n"
				+ "import org.springframework.test.web.servlet.MockMvc;\r\n"
				+ "\r\n"
				+ "import com.fasterxml.jackson.databind.ObjectMapper;\r\n"
				+ "import com.registerandlogin.controller."+className+"Controller;\r\n"
				+ "import com.registerandlogin.models."+className+";\r\n"
				+ "import com.registerandlogin.repo.I"+className+";\r\n"
				+ "\r\n"
				+ "@ExtendWith(SpringExtension.class)\r\n"
				+ "@WebMvcTest("+className+"Controller.class)\r\n"
				+ "public class "+className+"ControllerTest {\r\n"
				+ "\r\n"
				+ "	@Autowired\r\n"
				+ "	private MockMvc mvc;\r\n"
				+ "\r\n"
				+ "	@MockBean\r\n"
				+ "	private I"+className+" repo;\r\n"
				+ "\r\n"
				+ "	Optional<"+className+"> "+util.firstLetterToLower(className)+";\r\n"
				+ "	\r\n"
				+ "	"+className+" "+util.firstLetterToLower(className)+"2;\r\n"
				+ "	\r\n"
				+ "	@BeforeEach\r\n"
				+ "	void setup() {\r\n"
				+ "		this."+util.firstLetterToLower(className)+" = Optional.of(new "+className+"(1, \"test@test.com\",\"username\", \"password\"));\r\n"
				+ "		this."+util.firstLetterToLower(className)+"2 = new "+className+"(\"test2@test.com\", \"username2\", \"password2\");\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	void given"+className+"_whenPost"+className+"_thenReturnJson"+className+"() throws Exception {\r\n"
				+ "		given(repo.save("+util.firstLetterToLower(className)+"2)).willReturn("+util.firstLetterToLower(className)+"2);\r\n"
				+ "		\r\n"
				+ "		mvc.perform(post(\"/"+util.firstLetterToLower(className)+"s\").contentType(MediaType.APPLICATION_JSON).content(new ObjectMapper().writeValueAsString("+util.firstLetterToLower(className)+"2)))\r\n"
				+ "			.andDo(print())\r\n"
				+ "			.andExpect(status().isOk());\r\n"
				+ "	}\r\n"
				+ "\r\n"
				+ "	@Test\r\n"
				+ "	public void given"+className+"s_whenGet"+className+"s_thenReturnJsonArray() throws Exception {\r\n"
				+ "		\r\n"
				+ "		List<"+className+"> all"+className+"s = Arrays.asList("+util.firstLetterToLower(className)+"2);\r\n"
				+ "\r\n"
				+ "		given(repo.findAll()).willReturn(all"+className+"s);\r\n"
				+ "\r\n"
				+ "		mvc.perform(get(\"/"+util.firstLetterToLower(className)+"s\").contentType(MediaType.APPLICATION_JSON))\r\n"
				+ "			.andExpect(status().isOk())\r\n"
				+ "			.andExpect(jsonPath(\"$[0].username\", is("+util.firstLetterToLower(className)+"2.getUsername())));\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	public void given"+className+"_WhenGet"+className+"_ThenReturnJson"+className+"() throws Exception {\r\n"
				+ "		\r\n"
				+ "		given(repo.findById(1)).willReturn("+util.firstLetterToLower(className)+");\r\n"
				+ "		\r\n"
				+ "		 mvc.perform(get(\"/"+util.firstLetterToLower(className)+"s/1\").contentType(MediaType.APPLICATION_JSON))\r\n"
				+ "			.andExpect(status().isOk())\r\n"
				+ "			.andExpect(jsonPath(\"$.username\", is(\"username\")));\r\n"
				+ "	}\r\n"
				+ "\r\n"
				+ "	@Test\r\n"
				+ "	public void given"+className+"_WhenGet"+className+"ByUsername_ThenReturnJson"+className+"() throws Exception {\r\n"
				+ "		\r\n"
				+ "		given(repo.findByUsername(\"username\")).willReturn("+util.firstLetterToLower(className)+".get());\r\n"
				+ "		\r\n"
				+ "		 mvc.perform(get(\"/"+util.firstLetterToLower(className)+"s/"+util.firstLetterToLower(className)+"/username\").contentType(MediaType.APPLICATION_JSON))\r\n"
				+ "			.andExpect(status().isOk())\r\n"
				+ "			.andExpect(jsonPath(\"$.emailId\", is("+util.firstLetterToLower(className)+".get().getEmailId())));\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	public void given"+className+"_WhenLogin_emailIdAndPassword() throws Exception {\r\n"
				+ "		\r\n"
				+ "		given(repo.findByEmailIdAndPassword(\"test@test.com\", \"password\")).willReturn("+util.firstLetterToLower(className)+".get());\r\n"
				+ "		\r\n"
				+ "		mvc.perform(post(\"/"+util.firstLetterToLower(className)+"s/login\").contentType(MediaType.APPLICATION_JSON).content(new ObjectMapper().writeValueAsString("+util.firstLetterToLower(className)+".get())))\r\n"
				+ "			.andExpect(status().isOk())\r\n"
				+ "			.andExpect(jsonPath(\"$.username\", is("+util.firstLetterToLower(className)+".get().getUsername())));\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	void testUpdate() throws Exception {\r\n"
				+ "		given(repo.save("+util.firstLetterToLower(className)+"2)).willReturn("+util.firstLetterToLower(className)+"2);\r\n"
				+ "		"+className+" "+util.firstLetterToLower(className)+"3 =new "+className+"(0, \"test3@test.com\" ,\"password3\", \"password3\");\r\n"
				+ "		given(repo.save("+util.firstLetterToLower(className)+"3)).willReturn("+util.firstLetterToLower(className)+"3);\r\n"
				+ "		given(repo.findById(0)).willReturn(Optional.empty());\r\n"
				+ "		given(repo.findById(1)).willReturn(Optional.of("+util.firstLetterToLower(className)+"3));\r\n"
				+ "\r\n"
				+ "		mvc.perform(put(\"/"+util.firstLetterToLower(className)+"s\")\r\n"
				+ "			.contentType(MediaType.APPLICATION_JSON)\r\n"
				+ "			.content(new ObjectMapper().writeValueAsString("+util.firstLetterToLower(className)+"2)))\r\n"
				+ "			.andDo(print())\r\n"
				+ "			.andExpect(status().isOk());\r\n"
				+ "		\r\n"
				+ "		mvc.perform(put(\"/"+util.firstLetterToLower(className)+"s\")\r\n"
				+ "				.contentType(MediaType.APPLICATION_JSON)\r\n"
				+ "				.content(new ObjectMapper().writeValueAsString("+util.firstLetterToLower(className)+"3)))\r\n"
				+ "				.andDo(print())\r\n"
				+ "				.andExpect(status().isOk());\r\n"
				+ "		\r\n"
				+ "	  }\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	void testDelete() throws Exception {\r\n"
				+ "		given(repo.findById(1)).willReturn("+util.firstLetterToLower(className)+");\r\n"
				+ "		mvc.perform(delete(\"/"+util.firstLetterToLower(className)+"s/1\"))\r\n"
				+ "			.andExpect(status().isOk());\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	\r\n"
				+ "}\r\n"
				+ "";
	}
}
