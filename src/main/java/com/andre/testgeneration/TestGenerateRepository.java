package com.andre.testgeneration;

import static com.andre.util.Util.util;

public class TestGenerateRepository {
	
	private String className;

	
	public String getClassName() {
		return className;
	}

	public void setClassName(String className) {
		this.className = util.firstLetterToCapital(className);
	}

	public TestGenerateRepository(String className) {
		super();
		this.className = util.firstLetterToCapital(className);
	}
	
	public String getRepositoryTest() {
		
		String result = "@ExtendWith(SpringExtension.class)\r\n"
				+ "@DataJpaTest\r\n"
				+ "public class I"+className+"Test {\r\n"
				+ "	     \r\n"
				+ "    @Autowired\r\n"
				+ "    private I"+className+" repo;\r\n"
				+ "    \r\n"
				+ "    private "+className+" "+util.firstLetterToLower(className)+";\r\n"
				+ "    \r\n"
				+ "    private "+className+" "+util.firstLetterToLower(className)+"2;\r\n"
				+ "    \r\n"
				+ "    @BeforeEach\r\n"
				+ "    public void setup() {\r\n"
				+ "    	this."+util.firstLetterToLower(className)+" = new "+className+"(\"patient\", \"password\", \"firstName\", \"lastName\", \"middleName\", new ArrayList<>(),\r\n"
				+ "				\"19735678888\");\r\n"
				+ "    	this."+util.firstLetterToLower(className)+"2 = new "+className+"(\"patient2\", \"password2\", \"firstName2\", \"lastName2\", \"middleName2\", new ArrayList<>(),\r\n"
				+ "				\"19735678882\");\r\n"
				+ "    	repo.save("+util.firstLetterToLower(className)+"2);\r\n"
				+ "    	repo.save(new "+className+"(\"patient3\", \"password3\", \"firstName3\", \"lastName3\", \"middleName3\", new ArrayList<>(),\r\n"
				+ "				\"19735678885\"));\r\n"
				+ "    }\r\n"
				+ "    \r\n"
				+ "    @Test\r\n"
				+ "    void injectedComponentsAreNotNull(){\r\n"
				+ "      assertThat(repo).isNotNull();\r\n"
				+ "    }\r\n"
				+ "    \r\n"
				+ "    @Test\r\n"
				+ "    public void testSaveNew"+className+"() {\r\n"
				+ "    	"+className+" saved"+className+" = repo.save("+util.firstLetterToLower(className)+");\r\n"
				+ "    	\r\n"
				+ "    	assertThat(saved"+className+".getId()).isGreaterThan(0);\r\n"
				+ "    }\r\n"
				+ "    \r\n"
				+ "    @Test  \r\n"
				+ "    public void testReadAll"+className+"() {\r\n"
				+ "    	repo.save("+util.firstLetterToLower(className)+");\r\n"
				+ "    	List<"+className+"> "+util.firstLetterToLower(className)+"s = repo.findAll();\r\n"
				+ "    	assertNotNull("+util.firstLetterToLower(className)+"s);\r\n"
				+ "    	assertEquals("+util.firstLetterToLower(className)+"s.size(), 3);\r\n"
				+ "    }\r\n"
				+ "    \r\n"
				+ "    @Test\r\n"
				+ "    public void testFindA"+className+"() {\r\n"
				+ "    	"+className+" found"+className+" = repo.findBy"+className+"name(\"patient3\");\r\n"
				+ "    	assertEquals(\"patient3\", found"+className+".get"+className+"name());\r\n"
				+ "    	assertEquals(2, found"+className+".getId()); //This id is generated by the spring //This entity counts as the second entity inserted\r\n"
				+ "    }\r\n"
				+" \r\n"
				+ "    @Test\r\n"
				+ "    public void testFindA"+className+"ByEmailIdAndPassword() {\r\n"
				+ "    	"+className+" found"+className+" = repo.findByEmailIdAndPassword(\"patient3\", \"password3\");\r\n"
				+ "    	assertEquals(\"patient3\", found"+className+".get"+className+"name());\r\n"
				+ "    	assertEquals(2, found"+className+".getId()); //This id is generated by the spring //This entity counts as the second entity inserted\r\n"
				+ "    }\r\n"
				+ "     \r\n"
				+ "    @Test  \r\n"
				+ "    public void testfind"+className+"AndUpdate"+className+"() {\r\n"
				+ "    	"+className+" "+util.firstLetterToLower(className)+" = repo.findBy"+className+"name(\"patient3\");\r\n"
				+ "    	"+util.firstLetterToLower(className)+".set"+className+"name(\"Hello\");\r\n"
				+ "    	repo.save("+util.firstLetterToLower(className)+");\r\n"
				+ "    	"+className+" updated"+className+" = repo.findBy"+className+"name(\"Hello\");\r\n"
				+ "    	assertNotNull(updated"+className+");\r\n"
				+ "    	assertEquals("+util.firstLetterToLower(className)+".getId(), updated"+className+".getId());//Making sure it has the same id as the previous one\r\n"
				+ "    }\r\n"
				+ "     \r\n"
				+ "    @Test  \r\n"
				+ "    public void testDelete"+className+"() {\r\n"
				+ "    	repo.delete("+util.firstLetterToLower(className)+"2);\r\n"
				+ "    	"+className+" "+util.firstLetterToLower(className)+"2 = repo.findBy"+className+"name(\"patient2\");\r\n"
				+ "    	assertNull("+util.firstLetterToLower(className)+"2);\r\n"
				+ "    }\r\n"
				+ "    \r\n"
				+ "}\r\n"
				+ "";
		return result;
	}
	
	

}
