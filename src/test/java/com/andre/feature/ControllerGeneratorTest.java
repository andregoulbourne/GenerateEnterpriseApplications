package com.andre.feature;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;

import com.andre.generations.GenerateController;


public class ControllerGeneratorTest {
	
	private GenerateController controllerGenerator;
	
	@Before
	public void setup() {
		this.controllerGenerator = new GenerateController("http://localhost:4200", "User");
	}
	
	@Test
	public void testGeneratesAValidControllerWithFieldInputs() {
		String exspectedResult = "package com.registerandlogin.controller;\r\n"
				+ "\r\n"
				+ "import java.util.List;\r\n"
				+ "import java.util.Optional;\r\n"
				+ "\r\n"
				+ "import org.springframework.beans.factory.annotation.Autowired;\r\n"
				+ "import org.springframework.web.bind.annotation.CrossOrigin;\r\n"
				+ "import org.springframework.web.bind.annotation.DeleteMapping;\r\n"
				+ "import org.springframework.web.bind.annotation.GetMapping;\r\n"
				+ "import org.springframework.web.bind.annotation.PathVariable;\r\n"
				+ "import org.springframework.web.bind.annotation.PostMapping;\r\n"
				+ "import org.springframework.web.bind.annotation.PutMapping;\r\n"
				+ "import org.springframework.web.bind.annotation.RequestBody;\r\n"
				+ "import org.springframework.web.bind.annotation.RequestMapping;\r\n"
				+ "import org.springframework.web.bind.annotation.RestController;\r\n"
				+ "\r\n"
				+ "import com.registerandlogin.dto.UserDTO;\r\n"
				+ "import com.registerandlogin.models.User;\r\n"
				+ "import com.registerandlogin.repo.IUser;\r\n"
				+ "\r\n"
				+ "@RestController\r\n"
				+ "@CrossOrigin(origins = \"http://localhost:4200\")\r\n"
				+ "@RequestMapping(\"users\")\r\n"
				+ "public class UserController {\r\n"
				+ "	\r\n"
				+ "    @Autowired\r\n"
				+ "    IUser repo;\r\n"
				+ "    \r\n"
				+ "    /**\r\n"
				+ "     * Creates a new User in the database\r\n"
				+ "     * @param User new User being created\r\n"
				+ "     * @return the representation of the User with its newly generated primary key.\r\n"
				+ "     * @throws Exception \r\n"
				+ "     */\r\n"
				+ "    @PostMapping\r\n"
				+ "    public User registerUser(@RequestBody User user) throws Exception {\r\n"
				+ "        if(user.getEmailId() != null && !\"\".equals(user.getEmailId())){\r\n"
				+ "              User userObj = repo.findByEmailId(user.getEmailId());\r\n"
				+ "               if(userObj != null){\r\n"
				+ "                   throw new Exception(\"User with \"+user.getEmailId()+\" already exist\");\r\n"
				+ "               }\r\n"
				+ "         }\r\n"
				+ "        return repo.save(user);\r\n"
				+ "    }\r\n"
				+ "\r\n"
				+ "    /**\r\n"
				+ "     * Retrieves all User stored in the database\r\n"
				+ "     * @return List of all User in the database in JSON format\r\n"
				+ "     */\r\n"
				+ "    @GetMapping\r\n"
				+ "    public List<User> getAll() {\r\n"
				+ "        List<User> users = repo.findAll();\r\n"
				+ "        return users;\r\n"
				+ "    }\r\n"
				+ "   \r\n"
				+ "    /**\r\n"
				+ "     * Retrieves an User based on the given ID\r\n"
				+ "     * @param id id of the User\r\n"
				+ "     * @return Single User found\r\n"
				+ "     */\r\n"
				+ "    @GetMapping(\"/{id}\")\r\n"
				+ "    public User getUser(@PathVariable(name = \"id\") int id) {\r\n"
				+ "        return repo.findById(id).get();\r\n"
				+ "    }\r\n"
				+ "\r\n"
				+ " /**\r\n"
				+ "     * Retrieves an User based on the given username\r\n"
				+ "     * @param username username of the User\r\n"
				+ "     * @return Single User found\r\n"
				+ "     */\r\n"
				+ "    @GetMapping(\"/user/{username}\")\r\n"
				+ "    public User getUser(@PathVariable(name = \"username\") String username) {\r\n"
				+ "        return repo.findByUsername(username);\r\n"
				+ "    } /**\r\n"
				+ "     * Retrieves an User based on the given emailId and password\r\n"
				+ "     * @param User user with given emailId and password for query\r\n"
				+ "     * @return Single User found\r\n"
				+ "     */\r\n"
				+ "    @PostMapping(\"/login\")\r\n"
				+ "    public User getUser(@RequestBody User user) {\r\n"
				+ "        String tempEmailId = user.getEmailId();\r\n"
				+ "        String tempPass = user.getPassword();\r\n"
				+ "        User userObj = null;\r\n"
				+ "        if(tempEmailId != null && tempPass != null){\r\n"
				+ "	          userObj = repo.findByEmailIdAndPassword(tempEmailId, tempPass);\r\n"
				+ "         }\r\n"
				+ "         return userObj;\r\n"
				+ "    }\r\n"
				+ " /**\r\n"
				+ "	 * \r\n"
				+ "	 * @param id     of already existing user\r\n"
				+ "	 * @param user with changes to update\r\n"
				+ "	 * @return the newly changed user\r\n"
				+ "	 */\r\n"
				+ "	@PutMapping\r\n"
				+ "	public User putUser(@RequestBody UserDTO userDTO) {\r\n"
				+ "		User user;\r\n"
				+ "		try {\r\n"
				+ "			user = repo.findById(userDTO.getId()).get();\r\n"
				+ "		} catch (Exception e) {\r\n"
				+ "			user = new User(userDTO.getId(), userDTO.getEmailId(), userDTO.getUsername(), userDTO.getPassword());\r\n"
				+ "			return repo.save(user);\r\n"
				+ "		}\r\n"
				+ "		\r\n"
				+ "		    user.setEmailId(userDTO.getEmailId());\r\n"
				+ "			user.setUsername(userDTO.getUsername());\r\n"
				+ "			user.setPassword(userDTO.getPassword());\r\n"
				+ "			return repo.saveAndFlush(user);\r\n"
				+ "			\r\n"
				+ "	}\r\n"
				+ "    /**\r\n"
				+ "     * Deletes the associated user\r\n"
				+ "     * @param UserId ID of the about me being deleted\r\n"
				+ "     */\r\n"
				+ "    @DeleteMapping(\"/{id}\")\r\n"
				+ "    public void deleteUser(@PathVariable(name = \"id\") int userId) {\r\n"
				+ "        repo.deleteById(userId);\r\n"
				+ "    }\r\n"
				+ "\r\n"
				+ "}\r\n"
				+ "";
		String result = controllerGenerator.getController();
		assertEquals(exspectedResult,result);
	}

}
