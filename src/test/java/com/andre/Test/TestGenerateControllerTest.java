package com.andre.Test;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;

import com.andre.testgeneration.TestGenerateController;

public class TestGenerateControllerTest {
	
	TestGenerateController generator;
	
	@Before
	public void setup() {
		this.generator = new TestGenerateController("User");
	}
	
	@Test
	public void testReturnAValidControllerTest() {
		assertEquals("package com.registerandlogin.test.controller;\r\n"
				+ "\r\n"
				+ "import static org.hamcrest.CoreMatchers.is;\r\n"
				+ "import static org.mockito.BDDMockito.given;\r\n"
				+ "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\r\n"
				+ "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\n"
				+ "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\r\n"
				+ "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\r\n"
				+ "import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\r\n"
				+ "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\r\n"
				+ "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n"
				+ "\r\n"
				+ "import java.util.Arrays;\r\n"
				+ "import java.util.List;\r\n"
				+ "import java.util.Optional;\r\n"
				+ "\r\n"
				+ "import org.junit.jupiter.api.BeforeEach;\r\n"
				+ "import org.junit.jupiter.api.Test;\r\n"
				+ "import org.junit.jupiter.api.extension.ExtendWith;\r\n"
				+ "import org.springframework.beans.factory.annotation.Autowired;\r\n"
				+ "import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\r\n"
				+ "import org.springframework.boot.test.mock.mockito.MockBean;\r\n"
				+ "import org.springframework.http.MediaType;\r\n"
				+ "import org.springframework.test.context.junit.jupiter.SpringExtension;\r\n"
				+ "import org.springframework.test.web.servlet.MockMvc;\r\n"
				+ "\r\n"
				+ "import com.fasterxml.jackson.databind.ObjectMapper;\r\n"
				+ "import com.registerandlogin.controller.UserController;\r\n"
				+ "import com.registerandlogin.models.User;\r\n"
				+ "import com.registerandlogin.repo.IUser;\r\n"
				+ "\r\n"
				+ "@ExtendWith(SpringExtension.class)\r\n"
				+ "@WebMvcTest(UserController.class)\r\n"
				+ "public class UserControllerTest {\r\n"
				+ "\r\n"
				+ "	@Autowired\r\n"
				+ "	private MockMvc mvc;\r\n"
				+ "\r\n"
				+ "	@MockBean\r\n"
				+ "	private IUser repo;\r\n"
				+ "\r\n"
				+ "	Optional<User> user;\r\n"
				+ "	\r\n"
				+ "	User user2;\r\n"
				+ "	\r\n"
				+ "	@BeforeEach\r\n"
				+ "	void setup() {\r\n"
				+ "		this.user = Optional.of(new User(1, \"test@test.com\",\"username\", \"password\"));\r\n"
				+ "		this.user2 = new User(\"test2@test.com\", \"username2\", \"password2\");\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	void givenUser_whenPostUser_thenReturnJsonUser() throws Exception {\r\n"
				+ "		given(repo.save(user2)).willReturn(user2);\r\n"
				+ "		\r\n"
				+ "		mvc.perform(post(\"/users\").contentType(MediaType.APPLICATION_JSON).content(new ObjectMapper().writeValueAsString(user2)))\r\n"
				+ "			.andDo(print())\r\n"
				+ "			.andExpect(status().isOk());\r\n"
				+ "	}\r\n"
				+ "\r\n"
				+ "	@Test\r\n"
				+ "	public void givenUsers_whenGetUsers_thenReturnJsonArray() throws Exception {\r\n"
				+ "		\r\n"
				+ "		List<User> allUsers = Arrays.asList(user2);\r\n"
				+ "\r\n"
				+ "		given(repo.findAll()).willReturn(allUsers);\r\n"
				+ "\r\n"
				+ "		mvc.perform(get(\"/users\").contentType(MediaType.APPLICATION_JSON))\r\n"
				+ "			.andExpect(status().isOk())\r\n"
				+ "			.andExpect(jsonPath(\"$[0].username\", is(user2.getUsername())));\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	public void givenUser_WhenGetUser_ThenReturnJsonUser() throws Exception {\r\n"
				+ "		\r\n"
				+ "		given(repo.findById(1)).willReturn(user);\r\n"
				+ "		\r\n"
				+ "		 mvc.perform(get(\"/users/1\").contentType(MediaType.APPLICATION_JSON))\r\n"
				+ "			.andExpect(status().isOk())\r\n"
				+ "			.andExpect(jsonPath(\"$.username\", is(\"username\")));\r\n"
				+ "	}\r\n"
				+ "\r\n"
				+ "	@Test\r\n"
				+ "	public void givenUser_WhenGetUserByUsername_ThenReturnJsonUser() throws Exception {\r\n"
				+ "		\r\n"
				+ "		given(repo.findByUsername(\"username\")).willReturn(user.get());\r\n"
				+ "		\r\n"
				+ "		 mvc.perform(get(\"/users/user/username\").contentType(MediaType.APPLICATION_JSON))\r\n"
				+ "			.andExpect(status().isOk())\r\n"
				+ "			.andExpect(jsonPath(\"$.emailId\", is(user.get().getEmailId())));\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	public void givenUser_WhenLogin_emailIdAndPassword() throws Exception {\r\n"
				+ "		\r\n"
				+ "		given(repo.findByEmailIdAndPassword(\"test@test.com\", \"password\")).willReturn(user.get());\r\n"
				+ "		\r\n"
				+ "		mvc.perform(post(\"/users/login\").contentType(MediaType.APPLICATION_JSON).content(new ObjectMapper().writeValueAsString(user.get())))\r\n"
				+ "			.andExpect(status().isOk())\r\n"
				+ "			.andExpect(jsonPath(\"$.username\", is(user.get().getUsername())));\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	void testUpdate() throws Exception {\r\n"
				+ "		given(repo.save(user2)).willReturn(user2);\r\n"
				+ "		User user3 =new User(0, \"test3@test.com\" ,\"password3\", \"password3\");\r\n"
				+ "		given(repo.save(user3)).willReturn(user3);\r\n"
				+ "		given(repo.findById(0)).willReturn(Optional.empty());\r\n"
				+ "		given(repo.findById(1)).willReturn(Optional.of(user3));\r\n"
				+ "\r\n"
				+ "		mvc.perform(put(\"/users\")\r\n"
				+ "			.contentType(MediaType.APPLICATION_JSON)\r\n"
				+ "			.content(new ObjectMapper().writeValueAsString(user2)))\r\n"
				+ "			.andDo(print())\r\n"
				+ "			.andExpect(status().isOk());\r\n"
				+ "		\r\n"
				+ "		mvc.perform(put(\"/users\")\r\n"
				+ "				.contentType(MediaType.APPLICATION_JSON)\r\n"
				+ "				.content(new ObjectMapper().writeValueAsString(user3)))\r\n"
				+ "				.andDo(print())\r\n"
				+ "				.andExpect(status().isOk());\r\n"
				+ "		\r\n"
				+ "	  }\r\n"
				+ "	\r\n"
				+ "	@Test\r\n"
				+ "	void testDelete() throws Exception {\r\n"
				+ "		given(repo.findById(1)).willReturn(user);\r\n"
				+ "		mvc.perform(delete(\"/users/1\"))\r\n"
				+ "			.andExpect(status().isOk());\r\n"
				+ "	}\r\n"
				+ "	\r\n"
				+ "	\r\n"
				+ "}\r\n"
				+ "" ,
				generator.generateControllerTest());
	}

}
